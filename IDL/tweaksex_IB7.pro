;##############################################################
;# WISPIPE
;# Reduction Pipeline for the WISP program
;# Generated by Sophia Dai 2014
;# Purpose: 
;#       generate catalogs with SEXtractor on the CR cleaned flt images
;# Input:  
;#       F110_crclean.list, F160_crclean.list or F140_crclean.list
;# Output:
;#        cat_F110.cat, cat_F160.cat or cat_F140.cat
;#       tweakreg.py in DATA/DIRECT folder
;#
;# Sophia Dai
;# 2015
;# 2015.03.19 update: added the number counts to avoid failed drz for
;# single images
;# 
;# Ivano Baronchelli June 2016 updates:
;#
;# Version 7
;# - The bad pixel mask used is the updated one (bp_mask_v6.pl), that
;#     considers also the wagon wheel feature.
;#
;# Version 6
;# - rms maps created without multiplicative factor, from wht images
;#
;# Version 5
;# - update_wcs set to no in tweakreg before astrodrizzle (as in the
;#   version 5.0 of the pipeline)
;#
;# Version 4
;# - update_wcs set to yes in tweakreg before astrodrizzle
;# Version 3 ------------------------------------------
;# - crclean hlet files are now applied to F110 (they weren't before)
;#   See modification between: xxx-IVANO-xxx
;#
;# - the external frame is removed (it causes problems when
;# determining the position of the grism stamps to be extracted and
;# the zero-orders
;# Previous versions------------------------------------
;# - last image drizzle, update_wcs='True' --> 'False'
;# - Ra,dec center of the H original drizzled image are used to
;#   set the center of the final J and H tweakreged and drizzled
;#   images.
;# - The x, y dimensions of the H original drizzled image are used
;#   to set the dimension of the final J and H tweakreged and
;#   drizzled images.
;# - in all the "imcalc" tasks, the rms image is computed using
;#   the following form:
;#   iraf.imcalc(input="input_wht.fits", output="output_rms.fits", equals="1.0/sqrt(im1)")
;#   This new solution is suggested by Marc Rafelsky and sobstitutes
;#   the old one:
;#   iraf.imcalc(input="input_wht.fits", output="output_rms.fits", equals="value/sqrt(im1)")
;#   
;###############################################################
pro tweaksex_IB7,field,path0,pathconf,F140only=F140only

  path = expand_path(path0)+'/aXe/'+field+'/'
  configpath = expand_path(pathconf)+'/aXe/CONFIG/'

;path = '/Volumes/Kudo/DATA/WISPS/aXe/Par288-full/'
;tweaksex,'Par288-full','/Volumes/Kudo/DATA/WISPS'

readcol,path+'DATA/DIRECT/F110_crclean.list',f110_list,format=('A')
readcol,path+'DATA/DIRECT_GRISM/F160_clean.list',f160_list0,format=('A')

if  f160_list0[0] ne 'none' then readcol,path+'DATA/DIRECT/F160_crclean.list',f160_list,format=('A')
if  f160_list0[0] eq 'none' then readcol,path+'DATA/DIRECT/F140_crclean.list',f140_list,format=('A')

;   spawn,'cp '+path+'DATA/DIRECT/'+f110_list[0]+' '+path+'DATA/DIRECT/ref.crclean.fits'
;   spawn,'cp '+path+'DATA/DIRECT/'+f110_list[0]+'.coo '+path+'DATA/DIRECT/ref.crclean.fits.coo'
;   spawn,'cp '+path+'DATA/DIRECT/'+f110_list[0]+' '+path+'DATA/DIRECT/ref.crclean.fits'
;   spawn,'cp '+path+'DATA/DIRECT/'+f110_list[0]+'.coo '+path+'DATA/DIRECT/ref.crclean.fits.coo'


; Run SExtractor on CR cleaned direct flt images
; **************************************
for i = 0, n_elements(f110_list)-1 do begin
    h1=headfits(path+'DATA/DIRECT/'+strmid(f110_list[i],0,19)+'_crclean.fits') 
    exptime1=strcompress(sxpar(h1,'EXPTIME'),/remove_all)
    if exptime1 gt 1041 then det='1.9'
    if exptime1 le 1041 then det='2.3'
    spawn,'sex '+path+'DATA/DIRECT/'+strmid(f110_list[i],0,19)+'_crclean.fits -c '+path+'SEX/config.sex -catalog_name '+path+$
          'SEX/'+f110_list[i]+'.coo -mag_zeropoint 26.83 -WEIGHT_TYPE MAP_WEIGHT -weight_image '+path+$
          'DATA/DIRECT/'+strmid(f110_list[i],0,19)+'_crclean.fits'+$
          ' -parameters_name '+path+$
          'SEX/config.param -filter Y -filter_name '+path+'SEX/gauss_2.0_5x5.conv -detect_minarea 6 -detect_thresh '+det+$
          ' -ANALYSIS_THRESH 2 -CHECKIMAGE_NAME '+path+$
          'SEX/'+strmid(f110_list[i],0,19)+'_crclean_seg.fits -DEBLEND_NTHRESH 64 -DEBLEND_MINCONT 0.005 -GAIN '+exptime1+$
          ' -STARNNW_NAME '+path+'SEX/default.nnw'
   spawn,'cp '+path+'SEX/'+f110_list[i]+'.coo '+path+'DATA/DIRECT/'
endfor

if f160_list0[0] ne 'none' then begin
for i = 0, n_elements(f160_list)-1 do begin
    h2=headfits(path+'DATA/DIRECT/'+strmid(f160_list[i],0,19)+'_crclean.fits') 
    exptime2=strcompress(sxpar(h2,'EXPTIME'),/remove_all)
    det='2.3'
    spawn,'sex '+path+'DATA/DIRECT/'+strmid(f160_list[i],0,19)+'_crclean.fits -c '+path+'SEX/config.sex -catalog_name '+path+$
          'SEX/'+f160_list[i]+'.coo -mag_zeropoint 25.96 -WEIGHT_TYPE MAP_WEIGHT -weight_image '+path+$
          'DATA/DIRECT/'+strmid(f160_list[i],0,19)+'_crclean.fits'+$
          ' -parameters_name '+path+$
          'SEX/config.param -filter Y -filter_name '+path+'SEX/gauss_2.0_5x5.conv -detect_minarea 6 -detect_thresh '+det+$
          ' -ANALYSIS_THRESH 2 -CHECKIMAGE_NAME '+path+$
          'SEX/'+strmid(f160_list[i],0,19)+'_crclean_seg.fits -DEBLEND_NTHRESH 16 -DEBLEND_MINCONT 0.005 -GAIN '+exptime2+$
          ' -STARNNW_NAME '+path+'SEX/default.nnw'
    spawn,'cp '+path+'SEX/'+f160_list[i]+'.coo '+path+'DATA/DIRECT/'
endfor
endif else begin
   for i = 0, n_elements(f140_list)-1 do begin
    h2=headfits(path+'DATA/DIRECT/'+strmid(f140_list[i],0,19)+'_crclean.fits') 
    exptime2=strcompress(sxpar(h2,'EXPTIME'),/remove_all)
    det='2.0'
    spawn,'sex '+path+'DATA/DIRECT/'+strmid(f140_list[i],0,19)+'_crclean.fits -c '+path+'SEX/config.sex -catalog_name '+path+$
          'SEX/'+f140_list[i]+'.coo -mag_zeropoint 26.46 -WEIGHT_TYPE MAP_WEIGHT -weight_image '+path+$
          'DATA/DIRECT/'+strmid(f140_list[i],0,19)+'_crclean.fits'+$
          ' -parameters_name '+path+$
          'SEX/config.param -filter Y -filter_name '+path+'SEX/gauss_2.0_5x5.conv -detect_minarea 6 -detect_thresh '+det+$
          ' -ANALYSIS_THRESH 2 -CHECKIMAGE_NAME '+path+$
          'SEX/'+strmid(f140_list[i],0,19)+'_crclean_seg.fits -DEBLEND_NTHRESH 64 -DEBLEND_MINCONT 0.005 -GAIN '+exptime2+$
          ' -STARNNW_NAME '+path+'SEX/default.nnw'
    spawn,'cp '+path+'SEX/'+f140_list[i]+'.coo '+path+'DATA/DIRECT/'
   endfor
endelse


;Run SExtractor on direct images
;*************************************

;F110W
if not keyword_set(F140only) then begin
   h1=headfits(path+'DATA/DIRECT/F110W_orig_drz.fits') 
   exptime1=strcompress(sxpar(h1,'EXPTIME'),/remove_all)
if exptime1 gt 1041 then det='1.9'
    if exptime1 le 1041 then det='2.3'
    spawn,'sex '+path+'DATA/DIRECT/F110W_orig_sci.fits -c '+path+'SEX/config.sex -catalog_name '+path+$
          'SEX/F110.cat -mag_zeropoint 26.83 -WEIGHT_TYPE MAP_WEIGHT,MAP_RMS -weight_image '+path+$
          'DATA/DIRECT/F110W_orig_wht.fits,'+path+'DATA/DIRECT/F110W_orig_rms.fits -parameters_name '+path+$
          'SEX/config.param -filter Y -filter_name '+path+'SEX/gauss_2.0_5x5.conv -detect_minarea 6 -detect_thresh '+det+$
          ' -ANALYSIS_THRESH 2 -CHECKIMAGE_NAME '+path+'SEX/F110_seg.fits -DEBLEND_NTHRESH 64 -DEBLEND_MINCONT 0.005 -GAIN '+exptime1+$
          ' -STARNNW_NAME '+path+'SEX/default.nnw'
   spawn,'cp '+path+'SEX/F110.cat '+path+'DATA/DIRECT/'
endif

if f160_list0[0] ne 'none' then begin
;F160W
   h2=headfits(path+'DATA/DIRECT/F160W_orig_drz.fits') 
   exptime2=strcompress(sxpar(h2,'EXPTIME'),/remove_all)
   det='2.3'
   spawn,'sex '+path+'DATA/DIRECT/F160W_orig_sci.fits -c '+path+'SEX/config.sex -catalog_name '+path+'SEX/F160.cat -mag_zeropoint 25.96 -WEIGHT_TYPE MAP_WEIGHT,MAP_RMS -weight_image '+path+'DATA/DIRECT/F160W_orig_wht.fits,'+path+'DATA/DIRECT/F160W_orig_rms.fits -parameters_name '+path+'SEX/config.param -filter Y -filter_name '+path+'SEX/gauss_2.0_5x5.conv -detect_minarea 6 -detect_thresh '+det+' -ANALYSIS_THRESH 2 -CHECKIMAGE_NAME '+path+'SEX/F160_seg.fits -DEBLEND_NTHRESH 64 -DEBLEND_MINCONT 0.005 -GAIN '+exptime2+' -STARNNW_NAME '+path+'SEX/default.nnw'
   spawn,'cp '+path+'SEX/F160.cat '+path+'DATA/DIRECT/'
endif else begin
;F140W
   for i = 0, n_elements(f140_list)-1 do begin
   h2=headfits(path+'DATA/DIRECT/F140W_orig_drz.fits') 
   exptime2=strcompress(sxpar(h2,'EXPTIME'),/remove_all)
   det='2.0'
   spawn,'sex '+path+'DATA/DIRECT/F140W_orig_sci.fits'+' -c '+path+'SEX/config.sex -catalog_name '+path+'SEX/F140.cat -mag_zeropoint 26.46 -WEIGHT_TYPE MAP_WEIGHT,MAP_RMS -weight_image '+path+'DATA/DIRECT/F140W_orig_wht.fits,'+path+'DATA/DIRECT/F140W_orig_rms.fits -parameters_name '+path+'SEX/config.param -filter Y -filter_name '+path+'SEX/gauss_2.0_5x5.conv -detect_minarea 6 -detect_thresh '+det+' -ANALYSIS_THRESH 2 -CHECKIMAGE_NAME '+path+'SEX/F140_seg.fits -DEBLEND_NTHRESH 64 -DEBLEND_MINCONT 0.005 -GAIN '+exptime2+' -STARNNW_NAME '+path+'SEX/default.nnw'
   spawn,'cp '+path+'SEX/F140.cat '+path+'DATA/DIRECT/'
   endfor
endelse


;Now generate the python code to tweakreg each flt file to the
;drizzled F110W file
;*************************************
openw,6,path+'DATA/DIRECT/tweakreg.py'
openw,7,path+'DATA/GRISM/img_size.txt'
   printf,6,'import os,string,time'
   printf,6,'import sys'
   printf,6,'import shutil'
   printf,6,'from pyraf import iraf'
   printf,6,'from iraf import stsdas, dither'
   printf,6,'from pyraf.irafpar import IrafParS'
   printf,6,'from stsci.tools import teal'
   printf,6,'import drizzlepac'
   printf,6,'from drizzlepac import tweakreg'
   printf,6,'from drizzlepac import astrodrizzle'
   printf,6,'from drizzlepac import tweakback'
   printf,6,'import glob'
   printf,6,'from stwcs import wcsutil'
   printf,6,'import stwcs.wcsutil.headerlet'
   printf,6,'                '

;generate the position-shift headerlet for the crclean.fits as
;compared to F110W_orig_drz.fits
;*************************************

; NOTE:
; For the "clean" images, updatehdr=False because the header is update
; in the next passage using the headerlets of the cr-clean images !!
if not keyword_set(F140only) then begin

printf,6,'tweakreg.TweakReg("@direct_clean.list",catfile="direct_clean_catfile.list", refimage="F110W_orig_drz.fits",refcat="F110.cat",  wcsname="shift1", updatehdr=False, updatewcs=False,xcol=2, ycol=3, fluxcol=12, fluxunits="mag", xyunits="pixels",  refxcol=7, refycol=8, refxyunits="degrees", rfluxcol=12, rfluxunits="mag", minobj=15, searchrad=1.0, sigma=4.0, nclip=3, shiftfile=True,outshifts="shift_pos_drz_clean.txt", headerlet=True,fitgeometry="shift")'

printf,6,'tweakreg.TweakReg("@direct_crclean.list",catfile="direct_crclean_catfile.list", refimage="F110W_orig_drz.fits",refcat="F110.cat", wcsname="shift1", updatehdr=False, updatewcs=False,xcol=2, ycol=3, fluxcol=12, fluxunits="mag", xyunits="pixels",  refxcol=7, refycol=8, refxyunits="degrees", rfluxcol=12, rfluxunits="mag", minobj=15, searchrad=1.0, sigma=4.0, nclip=3, shiftfile=True,outshifts="shift_pos_drz_crclean.txt", headerlet=True,fitgeometry="shift")'

endif else begin
printf,6,'tweakreg.TweakReg("@direct_clean.list",catfile="direct_clean_catfile.list", refimage="F140W_orig_drz.fits",refcat="F140.cat",  wcsname="shift1", updatehdr=False, updatewcs=False,xcol=2, ycol=3, fluxcol=12, fluxunits="mag", xyunits="pixels",  refxcol=7, refycol=8, refxyunits="degrees", rfluxcol=12, rfluxunits="mag", minobj=15, searchrad=1.0, sigma=4.0, nclip=3, shiftfile=True,outshifts="shift_pos_drz_clean.txt", headerlet=True,fitgeometry="shift")'

printf,6,'tweakreg.TweakReg("@direct_crclean.list",catfile="direct_crclean_catfile.list", refimage="F140W_orig_drz.fits",refcat="F140.cat", wcsname="shift1", updatehdr=False, updatewcs=False,xcol=2, ycol=3, fluxcol=12, fluxunits="mag", xyunits="pixels",  refxcol=7, refycol=8, refxyunits="degrees", rfluxcol=12, rfluxunits="mag", minobj=15, searchrad=1.0, sigma=4.0, nclip=3, shiftfile=True,outshifts="shift_pos_drz_crclean.txt", headerlet=True,fitgeometry="shift")'

endelse



;    wcsname="tweakcrcleaned",
; interactive=False

;apply the headerlet to each exposure's direct image (clean)
;*************************************
   printf,6,'                '
   printf,6,'from stsci.tools import teal'
   printf,6,'import stwcs'
   printf,6,'cobj = teal.teal("apply_headerlet", loadOnly=True)'
   printf,6,'                '   

for i = 0, n_elements(f110_list)-1 do begin
   printf,6,'cobj["filename"] = "'+strmid(f110_list[i],0,19)+'.fits"'
;   xxx-IVANO-xxx
; OLD:
;    printf,6,'cobj["hdrlet"] = "'+strmid(f110_list[i],0,19)+'_hlet.fits"'
; NEW:
   printf,6,'cobj["hdrlet"] = "'+strmid(f110_list[i],0,19)+'_crclean_hlet.fits"'
;   xxx-IVANO-xxx
   printf,6,'stwcs.gui.apply_headerlet.run(cobj)'
endfor

if f160_list0[0] ne 'none' then begin
   for i = 0, n_elements(f160_list)-1 do begin
   printf,6,'cobj["filename"] = "'+strmid(f160_list[i],0,19)+'.fits"'
   printf,6,'cobj["hdrlet"] = "'+strmid(f160_list[i],0,19)+'_crclean_hlet.fits"'
   printf,6,'stwcs.gui.apply_headerlet.run(cobj)'
   endfor
endif else begin
   for i = 0, n_elements(f140_list)-1 do begin
   printf,6,'cobj["filename"] = "'+strmid(f140_list[i],0,19)+'.fits"'
   printf,6,'cobj["hdrlet"] = "'+strmid(f140_list[i],0,19)+'_crclean_hlet.fits"'
   printf,6,'stwcs.gui.apply_headerlet.run(cobj)'
   endfor
endelse





; IVANO update ----------------------------------
; Gets the following info from the original H drizzled image:
; - RA and dec center of the original drizzled image --> used to
; set the center of the final drizzled images for both J and H. 
; - Numer of x and y pixels of the drizzled image --> The final
; drizzled images will contain a 10% more pixels in both x and y,
; assuming the shifts between F110 and F160 less than this value
;
; READ image header
if  f160_list0[0] ne 'none' then img_ref_name=path+'DATA/DIRECT/F160W_orig_drz.fits'
if  f160_list0[0] eq 'none' then img_ref_name=path+'DATA/DIRECT/F140W_orig_drz.fits'
HD_im_ref=headfits(img_ref_name,EXTEN=1)
; Extract astrometry values
EXTAST,HD_im_ref,ASTROREF
; Get x y image size:
NXpixels=strcompress(sxpar(HD_im_ref,'NAXIS1'),/remove_all)
NYpixels=strcompress(sxpar(HD_im_ref,'NAXIS2'),/remove_all)
; identify central pixel:
;central_pix_x=round(float(NXpixels)/2.) ; CHANGE V3
;central_pix_y=round(float(NYpixels)/2.) ; CHANGE V3
central_pix_x=float(NXpixels)/2.
central_pix_y=float(NYpixels)/2.
; identify RA dec position of central pixel:
XY2AD,central_pix_x,central_pix_y,ASTROREF , RA_centralpix, dec_centralpix
RA_ref=strcompress(RA_centralpix,/remove_all)
dec_ref=strcompress(dec_centralpix,/remove_all)
; Compute original pixel scale [arcsec/pix]
ra1=RA_centralpix
dec1=dec_centralpix-0.01d
ra2=ra1
dec2=dec_centralpix+0.01d
DELTADEC=dec2-dec1 ;(=0.02°)
AD2XY, ra1 ,dec1,ASTROREF, xpix1, ypix1
AD2XY, ra2 ,dec2,ASTROREF, xpix2, ypix2 
DELTA_PIX_X=xpix2-xpix1
DELTA_PIX_Y=ypix2-ypix1
DELTAPIX=sqrt((DELTA_PIX_X^2.)+(DELTA_PIX_Y^2.))
ORIG_PIXSCALE=(DELTADEC/DELTAPIX)*3600.d ;[arcsec/pix]



; TEST TEST TEST TEST
; ORIG_PIXSCALE=0.128254



; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
; SET HERE THE PIXEL SCALE OF THE FINAL TWEAKREGED & ASTRODRIZZLED
; F110 and F160 IMAGES:
FINAL_PIXSCALE=0.08 ; [arcsec/pix] scale wanted for the final Astrodrizzled image
; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
F_pxsc_str=strcompress(string(FINAL_PIXSCALE),/remove_all)

; Determine the scaling factor:
scal_fact=ORIG_PIXSCALE/FINAL_PIXSCALE
; Define the final size (20% larger, in ra dec, than original image to account for
; possible small shifts or rotations. This supplementary area is
; visible as grey columns and rows)
NYpixels_tot=strcompress(string(round(float(NYpixels*scal_fact)+0.2*float(NYpixels*scal_fact))),/remove_all) ; CHANGE V3
NXpixels_tot=strcompress(string(round(float(NXpixels*scal_fact)+0.2*float(NXpixels*scal_fact))),/remove_all) ; CHANGE V3
;NYpixels_tot=strcompress(string(round(float(NYpixels*scal_fact))),/remove_all)
;NXpixels_tot=strcompress(string(round(float(NXpixels*scal_fact))),/remove_all)


printf,7, NXpixels_tot+' '+NYpixels_tot+' '+RA_ref+' '+dec_ref
; IVANO update END ------------------------------










;now drizzled to get the twked images
;**********************
   printf,6,'                '
  ; printf,6,'iraf.fixpix(images="@F110_clean.list'+'//[1]%''",masks="'+configpath+$
  ;        'bp_mask_v5.pl",linterp=1000,cinterp="INDEF")'
   printf,6,'iraf.fixpix(images="@F110_clean.list'+'//[1]%''",masks="'+configpath+$
          'bp_mask_v6.pl",linterp=1000,cinterp="INDEF")'
   num = n_elements(f110_list)
   if num gt 1 then begin
;      printf,6,'astrodrizzle.AstroDrizzle("@F110_clean.list", output="F110W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=True,clean=True,preserve=False, driz_cr_corr=True, driz_combine=True,final_scale=0.08,final_pixfrac=0.75)'
      printf,6,'astrodrizzle.AstroDrizzle("@F110_clean.list", output="F110W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=False,clean=True,preserve=False, driz_cr_corr=True, driz_combine=True,final_scale='+F_pxsc_str+',final_pixfrac=0.75,final_outnx='+NXpixels_tot+',final_outny='+NYpixels_tot+',final_ra='+RA_ref+',final_dec='+dec_ref+')'

   endif else begin
;      printf,6,'astrodrizzle.AstroDrizzle("@F110_clean.list", output="F110W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=True,clean=True,preserve=False,median=False,blot=False,driz_cr=False,final_scale=0.08,final_pixfrac=0.75)'
      printf,6,'astrodrizzle.AstroDrizzle("@F110_clean.list", output="F110W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=False,clean=True,preserve=False,median=False,blot=False,driz_cr=False,final_scale='+F_pxsc_str+',final_pixfrac=0.75,final_outnx='+NXpixels_tot+',final_outny='+NYpixels_tot+',final_ra='+RA_ref+',final_dec='+dec_ref+')'

   endelse   
   printf,6,'iraf.imcopy(input="F110W_twk_drz.fits[1]", output="F110W_twk_sci.fits")'
   printf,6,'iraf.imcopy(input="F110W_twk_drz.fits[2]", output="F110W_twk_wht.fits")'
   ;;; printf,6,'iraf.imcalc(input="F110W_twk_wht.fits", output="F110W_twk_rms.fits", equals="1.66354/sqrt(im1)")'
   printf,6,'iraf.imcalc(input="F110W_twk_wht.fits", output="F110W_twk_rms.fits", equals="1.0/sqrt(im1)")' ; NEW solution (Suggeste by Marc)

if f160_list0[0] ne 'none' then begin
  ; printf,6,'iraf.fixpix(images="@F160_clean.list'+'//[1]%''",masks="'+configpath+$
  ;            'bp_mask_v5.pl",linterp=1000,cinterp="INDEF")'
   printf,6,'iraf.fixpix(images="@F160_clean.list'+'//[1]%''",masks="'+configpath+$
              'bp_mask_v6.pl",linterp=1000,cinterp="INDEF")'
   num = n_elements(f160_list)
   if num gt 1 then begin
;      printf,6,'astrodrizzle.AstroDrizzle("@F160_clean.list", output="F160W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=True,clean=True,preserve=False, driz_cr_corr=True, driz_combine=True,final_scale=0.08,final_pixfrac=0.75)'
      printf,6,'astrodrizzle.AstroDrizzle("@F160_clean.list", output="F160W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=False,clean=True,preserve=False, driz_cr_corr=True, driz_combine=True,final_scale='+F_pxsc_str+',final_pixfrac=0.75,final_outnx='+NXpixels_tot+',final_outny='+NYpixels_tot+',final_ra='+RA_ref+',final_dec='+dec_ref+')'


      endif else begin
;      printf,6,'astrodrizzle.AstroDrizzle("@F160_clean.list", output="F160W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=True,clean=True,preserve=False,median=False,blot=False,driz_cr=False,final_scale=0.08,final_pixfrac=0.75)'
      printf,6,'astrodrizzle.AstroDrizzle("@F160_clean.list", output="F160W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=False,clean=True,preserve=False,median=False,blot=False,driz_cr=False,final_scale='+F_pxsc_str+',final_pixfrac=0.75,final_outnx='+NXpixels_tot+',final_outny='+NYpixels_tot+',final_ra='+RA_ref+',final_dec='+dec_ref+')'

      endelse
   
   printf,6,'iraf.imcopy(input="F160W_twk_drz.fits[1]", output="F160W_twk_sci.fits")'
   printf,6,'iraf.imcopy(input="F160W_twk_drz.fits[2]", output="F160W_twk_wht.fits")'
   ;;; printf,6,'iraf.imcalc(input="F160W_twk_wht.fits", output="F160W_twk_rms.fits", equals="1.66354/sqrt(im1)")'
   printf,6,'iraf.imcalc(input="F160W_twk_wht.fits", output="F160W_twk_rms.fits", equals="1.0/sqrt(im1)")' ; NEW solution (Suggeste by Marc)
endif else begin
   ; printf,6,'iraf.fixpix(images="@F140_clean.list'+'//[1]%''",masks="'+configpath+$
   ;       'bp_mask_v5.pl",linterp=1000,cinterp="INDEF")'
   printf,6,'iraf.fixpix(images="@F140_clean.list'+'//[1]%''",masks="'+configpath+$
          'bp_mask_v6.pl",linterp=1000,cinterp="INDEF")'
      num = n_elements(f140_list)
      if num gt 1 then begin
;         printf,6,'astrodrizzle.AstroDrizzle("@F140_clean.list", output="F140W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=True,clean=True,preserve=False, driz_cr_corr=True, driz_combine=True,final_scale=0.08,final_pixfrac=0.75)'
         printf,6,'astrodrizzle.AstroDrizzle("@F140_clean.list", output="F140W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=False,clean=True,preserve=False, driz_cr_corr=True, driz_combine=True,final_scale='+F_pxsc_str+',final_pixfrac=0.75,final_outnx='+NXpixels_tot+',final_outny='+NYpixels_tot+',final_ra='+RA_ref+',final_dec='+dec_ref+')'

       endif else begin
;         printf,6,'astrodrizzle.AstroDrizzle("@F140_clean.list", output="F140W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=True,clean=True,preserve=False,median=False,blot=False,driz_cr=False,final_scale=0.08,final_pixfrac=0.75)'
         printf,6,'astrodrizzle.AstroDrizzle("@F140_clean.list", output="F140W_twk",num_cores=5,final_wcs=True,final_wht_type="IVM",build=True,updatewcs=False,clean=True,preserve=False,median=False,blot=False,driz_cr=False,final_scale='+F_pxsc_str+',final_pixfrac=0.75,final_outnx='+NXpixels_tot+',final_outny='+NYpixels_tot+',final_ra='+RA_ref+',final_dec='+dec_ref+')'
      endelse
   printf,6,'iraf.imcopy(input="F140W_twk_drz.fits[1]", output="F140W_twk_sci.fits")'
   printf,6,'iraf.imcopy(input="F140W_twk_drz.fits[2]", output="F140W_twk_wht.fits")'
   ;;; printf,6,'iraf.imcalc(input="F140W_twk_wht.fits", output="F140W_twk_rms.fits", equals="1.66354/sqrt(im1)")'
   printf,6,'iraf.imcalc(input="F140W_twk_wht.fits", output="F140W_twk_rms.fits", equals="1.0/sqrt(im1)")' ; NEW solution (Suggeste by Marc)
endelse   


close,6,7
free_lun,6,7

; now update the *filter*_clean.list in DIRECT_GRISM/ folder to
; prepare for driz.py
    spawn,'cp '+path+'DATA/DIRECT/F110_crclean.list '+path+'DATA/DIRECT_GRISM/'
    spawn,'cp '+path+'DATA/DIRECT/F160_crclean.list '+path+'DATA/DIRECT_GRISM/'
    spawn,'cp '+path+'DATA/DIRECT/F140_crclean.list '+path+'DATA/DIRECT_GRISM/'
   
end
